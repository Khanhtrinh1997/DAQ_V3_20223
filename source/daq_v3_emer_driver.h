//--thanhcm3--07--04--22--
#ifndef _DAQ_EMER_DRIVER_H
#define _DAQ_EMER_DRIVER_H
//include-----------------------------------------------------------------------
//define------------------------------------------------------------------------
#define GetSysInfoLen	18
#define GetRecInfoLen	18
#define GetACInfoLen	20
#define GetAlarmDCLen	18
#define GetAlarmRectLen	18
#define GetAlarmACLen	20
#define GetAlarmManLen	18
#define GetMACAddrLen	18
#define GetChargerInfoLen	18
#define GetAlarmChargerLen	18
#define GetAtsInfoLen	20
#define GetHistoryInfoLen	24

#define GetTimeInfoLen 18
   
void setCommand(unsigned char *arrCmd,unsigned char *templateCmd, float setNum, bool type);
void getCommand(unsigned char *arrCmd,unsigned char *templateCmd);
//extern unsigned char g_setInfo[32];
//extern unsigned char g_getInfo[24];

static unsigned char header_getCode[13] = {
//~	2	0	0	1	E	1	E	B	A	0	0	6
0x7e,	0x32,	0x30,	0x30,	0x31,	0x45,	0x31,	0x45,	0x42,	0x41,	0x30,	0x30,	0x36
};

static unsigned char header_setCode[13] = {
//~	2	0	0	1	E	1	E	C	2	0	0	E
0x7e,	0x32,	0x30,	0x30,	0x31,	0x45,	0x31,	0x45,	0x43,	0x32,	0x30,	0x30,	0x45
};

static unsigned char cmdCodeTable[74][6] = {
//0	1	0	0	0	A	0: Battery Float Voltage
{0x30,	0x31,	0x30,	0x30,	0x30,	0x41},
//0	1	0	0	2	0	1: Battery Boost Voltage
{0x30,	0x31,	0x30,	0x30,	0x32,	0x30},
//0	1	0	0	1	5	2: Battery Temp Compensation
{0x30,	0x31,	0x30,	0x30,	0x31,	0x35},
//0	1	0	0	2	B	3: Battery LLVD
{0x30,	0x31,	0x30,	0x30,	0x32,	0x42},
//0	1	0	0	3	6	4: Battery BLVD
{0x30,	0x31,	0x30,	0x30,	0x33,	0x36},
//0	1	0	0	4	1	5: Battery DCLow
{0x30,	0x31,	0x30,	0x30,	0x34,	0x31},
//0	1	0	0	4	2	6: Battery DCUnder
{0x30,	0x31,	0x30,	0x30,	0x34,	0x32},
//0	1	0	0	5	7	7: Battery DCOver
{0x30,	0x31,	0x30,	0x30,	0x35,	0x37},
//0	1	0	0	5	8	8: Battery High#2
{0x30,	0x31,	0x30,	0x30,	0x35,	0x38},

//0	0	0	0	8	C	9: Battery Strings
{0x30,	0x30,	0x30,	0x30,	0x38,	0x43},
//0	0	0	0	8	D	10: Battery Model
{0x30,	0x30,	0x30,	0x30,	0x38,	0x44},
//0	0	0	0	8	E	11: Battery Capacity Display Mode
{0x30,	0x30,	0x30,	0x30,	0x38,	0x45},
//0	1	0	0	7	A	12: Battery Very High Temperature Voltage
{0x30,	0x31,	0x30,	0x30,	0x37,	0x41},
//0	0	0	0	9	8	13: Battery Very High Temperature Action
{0x30,	0x30,	0x30,	0x30,	0x39,	0x38},
//0	1	0	0	A	C	14: Battery Fuse Break Point
{0x30,	0x31,	0x30,	0x30,	0x41,	0x43},
//0	1	0	0	7	3	15: Battery Standard Capacity
{0x30,	0x31,	0x30,	0x30,	0x37,	0x33},
//0	1	0	0	7	4	16: Battery Real Capacity
{0x30,	0x31,	0x30,	0x30,	0x37,	0x34},

//0	1	0	0	7	B	17: Current Limit Point
{0x30,	0x31,	0x30,	0x30,	0x37,	0x42},
//0	1	0	0	7	7	18: Over Current Point
{0x30,	0x31,	0x30,	0x30,	0x37,	0x37},
//0	0	0	0	8	F	19: Auto Boost Enable
{0x30,	0x30,	0x30,	0x30,	0x38,	0x46},
//0	0	0	0	9	0	20: Cyclic Boost Enable
{0x30,	0x30,	0x30,	0x30,	0x39,	0x30},
//0	1	0	0	7	F	21: Boost Current
{0x30,	0x31,	0x30,	0x30,	0x37,	0x46},
//0	1	0	0	8	0	22: Boost Capacity
{0x30,	0x31,	0x30,	0x30,	0x38,	0x30},
//0	1	0	0	8	1	23: Constant Boost Current
{0x30,	0x31,	0x30,	0x30,	0x38,	0x31},
//0	1	0	0	8	2	24: Constant Boost Duration
{0x30,	0x31,	0x30,	0x30,	0x38,	0x32},
//0	1	0	0	7	C	25: Cyclic Boost Interval
{0x30,	0x31,	0x30,	0x30,	0x37,	0x43},
//0	1	0	0	7	D	26: Cyclic Boost Duration
{0x30,	0x31,	0x30,	0x30,	0x37,	0x44},
//0	1	0	0	7	E	27: Boost Time Limit
{0x30,	0x31,	0x30,	0x30,	0x37,	0x45},
//0	1	0	0	7	9	28: Battery Charge Efficiency
{0x30,	0x31,	0x30,	0x30,	0x37,	0x39},

//0	1	0	0	8	D	29: Temp Compensation Center
{0x30,	0x31,	0x30,	0x30,	0x38,	0x44},
//0	1	0	0	8	5	30: Battery Temp High
{0x30,	0x31,	0x30,	0x30,	0x38,	0x35},
//0	1	0	0	8	6	31: Battery Temp Over
{0x30,	0x31,	0x30,	0x30,	0x38,	0x36},
//0	1	0	0	8	7	32: Battery Temp Low
{0x30,	0x31,	0x30,	0x30,	0x38,	0x37},

//0	1	0	0	A	3	33: Rectifier HVSD
{0x30,	0x31,	0x30,	0x30,	0x41,	0x33},
//0	1	0	0	A	4	34: Recifier Default Voltage
{0x30,	0x31,	0x30,	0x30,	0x41,	0x34},
//0	1	0	0	A	7	35: HVSD Duration
{0x30,	0x31,	0x30,	0x30,	0x41,	0x37},
//0	1	0	0	A	8	36: Walk-in Duration
{0x30,	0x31,	0x30,	0x30,	0x41,	0x38},
//0	0	0	6	4	8	37: Walk-in Enable
{0x30,	0x30,	0x30,	0x36,	0x34,	0x38},
//0	1	0	0	B	F	38: Interval Start Duration
{0x30,	0x31,	0x30,	0x30,	0x42,	0x46},
//0	0	0	6	4	9	39: Fan Speed
{0x30,	0x30,	0x30,	0x36,	0x34,	0x39},
//0	0	0	6	7	7	40: AC Voltage Hi
{0x30,	0x30,	0x30,	0x36,	0x37,	0x37},
//0	1	0	0	A	B	41: Rectifier Work Alarm Duration
{0x30,	0x31,	0x30,	0x30,	0x41,	0x42},
//0	1	0	0	B	D	42: System Maintain Alarm Over Duration
{0x30,	0x31,	0x30,	0x30,	0x42,	0x45},
//0	1	0	0	0	8	43: RectACLimit
{0x30,	0x31,	0x30,	0x30,	0x30,	0x38},
//0	1	0	0	A	A	44: Rectifier Work Duration
{0x30,	0x31,	0x30,	0x30,	0x41,	0x41},
//0	1	0	0	0	2	45: AC Low Threshold
{0x30,	0x31,	0x30,	0x30,	0x30,	0x32},
//0	1	0	0	0	3	46: AC Under Threshold
{0x30,	0x31,	0x30,	0x30,	0x30,	0x33},
//0	1	0	0	0	0	47: AC High Threshold
{0x30,	0x31,	0x30,	0x30,	0x30,	0x30},
//0		1		0		0		8		E	48: Battery Test Voltage
{0x30,	0x31,	0x30,	0x30,	0x38,	0x45},
//0		1		0		0		8		F	49: Battery Test Duration
{0x30,	0x31,	0x30,	0x30,	0x38,	0x46},
//0		1		0		0		9		0	50: Test End Capacity
{0x30,	0x31,	0x30,	0x30,	0x39,	0x30},
//0		0		0		0		9		1	51: Time Test Enable
{0x30,	0x30,	0x30,	0x30,	0x39,	0x31},
//0		0		0		0		9		2	52: Short Test Enable
{0x30,	0x30,	0x30,	0x30,	0x39,	0x32},
//0		1		0		0		9		4	53: Battery Short Test Alarm Current
{0x30,	0x31,	0x30,	0x30,	0x39,	0x34},
//0		1		0		0		9		2	54: Battery Short Test Cycle
{0x30,	0x31,	0x30,	0x30,	0x39,	0x32},
//0		1		0		0		9		3	55: Battery Short Test Duration
{0x30,	0x31,	0x30,	0x30,	0x39,	0x33},
//0		0		0		0		9		3	56: Constant Current Test Enable
{0x30,	0x30,	0x30,	0x30,	0x39,	0x33},
//0		1		0		0		9		1	57: Constant Current Test Current
{0x30,	0x31,	0x30,	0x30,	0x39,	0x31},
//0		1		0		0		9		5	58: Battery Test Cycle
{0x30,	0x31,	0x30,	0x30,	0x39,	0x35},
//0		1		0		0		B		C	59: Battery Test Alarm Duration
{0x30,	0x31,	0x30,	0x30,	0x42,	0x43},
//0		0		0		0		9		A	60: Test Time 1 Month
{0x30,	0x30,	0x30,	0x30,	0x39,	0x41},
//0		0		0		0		9		B	61: Test Time 1 Day
{0x30,	0x30,	0x30,	0x30,	0x39,	0x42},
//0		0		0		0		9		C	62: Test Time 1 Hour
{0x30,	0x30,	0x30,	0x30,	0x39,	0x43},
//0		0		0		0		9		D	63: Test Time 2 Month
{0x30,	0x30,	0x30,	0x30,	0x39,	0x44},
//0		0		0		0		9		E	64: Test Time 2 Day
{0x30,	0x30,	0x30,	0x30,	0x39,	0x45},
//0		0		0		0		9		F	65: Test Time 2 Hour
{0x30,	0x30,	0x30,	0x30,	0x39,	0x46},
//0		0		0		0		A		0	66: Test Time 3 Month
{0x30,	0x30,	0x30,	0x30,	0x41,	0x30},
//0		0		0		0		A		1	67: Test Time 3 Day
{0x30,	0x30,	0x30,	0x30,	0x41,	0x31},
//0		0		0		0		A		2	68: Test Time 3 Hour
{0x30,	0x30,	0x30,	0x30,	0x41,	0x32},
//0		0		0		0		A		3	69: Test Time 4 Month
{0x30,	0x30,	0x30,	0x30,	0x41,	0x33},
//0		0		0		0		A		4	70: Test Time 4 Day
{0x30,	0x30,	0x30,	0x30,	0x41,	0x34},
//0		0		0		0		A		5	71: Test Time 4 Hour
{0x30,	0x30,	0x30,	0x30,	0x41,	0x35},
//0	0	0	0	9	4	72: LLVD Enable
{0x30,	0x30,	0x30,	0x30,	0x39,	0x34},
//0	0	0	0	9	5	73: BLVD Enable
{0x30,	0x30,	0x30,	0x30,	0x39,	0x35}

};
// Ban tin so 14	   History Info
static unsigned char GetHistoryInfo[24] = {
  //~	2	0	0	1	E	1	E	A	A	0	0	6       0       0	0	0	0	0	0	0	0	0	<CR>
0x7e,	0x32,	0x30,	0x30,	0x31,	0x45,	0x31,	0x45,	0x41,	0x41,	0x30,	0x30,	0x36,	0x30,   0x30,	0x30,   0x30,	0x30,   0x30,	0x30,	0x30,	0x30,	0x30,	0x0d
};
extern unsigned char GetHistoryInfo[24];

// Ban tin so 13	   Time Info
static const unsigned char GetTimeInfo[GetTimeInfoLen] = {
//~		2		0		0		1		E		1		E		1		0		0		0		0		F		D		9		1		<CR>
0x7e,	0x32,	0x30,	0x30,	0x31,	0x45,	0x31,	0x45,	0x31,	0x30,	0x30,	0x30,	0x30,	0x46,	0x44,	0x39,	0x31,	0x0d
};

// Ban tin so 8	   System Status
static const unsigned char GetSysInfo[GetSysInfoLen] = {  		// First Byte	~ High Byte, Last Byte ~ Low Byte
//~	2	0	0	1	4	2	4	1	0	0	0	0	F	D	B	2	<CR>
0x7e,	0x32,	0x30,	0x30,	0x31,	0x34,	0x32,	0x34,	0x31,	0x30,	0x30,	0x30,	0x30,	0x46,	0x44,	0x42,	0x32,	0x0d
};
// Ban tin so 7	   Rectifier
static const unsigned char GetRecInfo[GetRecInfoLen] = {
//~	2	0	0	1	4	1	4	1		0	0	0	0	F	D	B	3	<CR>
0x7e,	0x32,	0x30,	0x30,	0x31,	0x34,	0x31,	0x34,	0x31,	0x30,	0x30,	0x30,	0x30,	0x46,	0x44,	0x42,	0x33,	0x0d
};
// Ban tin so 6	   AC
static const unsigned char GetACInfo[GetACInfoLen] = {
//~	2	0	0	1	4	0	4	1	E	0	0	2	F	F	F	D	1	1	<CR>
0x7e,	0x32,	0x30,	0x30,	0x31,	0x34,	0x30,	0x34,	0x31,	0x45,	0x30,	0x30,	0x32,	0x46,	0x46,	0x46,	0x44,	0x31,	0x31,	0x0d
};
// Ban tin so 5	   Alarm DC
static const unsigned char GetAlarmDC[GetAlarmDCLen] = {
//~	2	0	0	1	4	2	4	4	0	0	0	0	F	D	A	F	<CR>
0x7e,	0x32,	0x30,	0x30,	0x31,	0x34,	0x32,	0x34,	0x34,	0x30,	0x30,	0x30,	0x30,	0x46,	0x44,	0x41,	0x46,	0x0d
};
// Ban tin so 3	   Alarm Rect
static const unsigned char GetAlarmRect[GetAlarmRectLen] = {
//~	2	0	0	1	4	1	4	4	0	0	0	0	F	D	B	0	<CR>
0x7e,	0x32,	0x30,	0x30,	0x31,	0x34,	0x31,	0x34,	0x34,	0x30,	0x30,	0x30,	0x30,	0x46,	0x44,	0x42,	0x30,	0x0d
};
// Ban tin so 2	   Alarm AC
static const unsigned char GetAlarmAC[GetAlarmACLen] = {
//~	2	0	0	1	4	0	4	4	E	0	0	2	F	F	F	D	0	E	<CR>
0x7e,	0x32,	0x30,	0x30,	0x31,	0x34,	0x30,	0x34,	0x34,	0x45,	0x30,	0x30,	0x32,	0x46,	0x46,	0x46,	0x44,	0x30,	0x45,	0x0d
};
// Ban tin so 1	   Alarm Man
static const unsigned char GetAlarmMan[GetAlarmManLen] = {
//~	2	0	0	1	E	1	8	1	0	0	0	0	F	D	9	E	<CR>
0x7e,	0x32,	0x30,	0x30,	0x31,	0x45,	0x31,	0x38,	0x31,	0x30,	0x30,	0x30,	0x30,	0x46,	0x44,	0x39,	0x45,	0x0d
};
// Ban tin TEST CODE
static const unsigned char GetMACAddr[GetMACAddrLen] = {  			// First Byte	~ High Byte, Last Byte ~ Low Byte
//~	2	0	0	1	E	1	5	3	0	0	0	0	F	D	9	F	<CR>
0x7e,	0x32,	0x30,	0x30,	0x31,	0x45,	0x31,	0x35,	0x33,	0x30,	0x30,	0x30,	0x30,	0x46,	0x44,	0x39,	0x46,	0x0d
};
//static const unsigned char GetHistoryInfo[GetHistoryInfoLen] = {  		// First Byte	~ High Byte, Last Byte ~ Low Byte
////~	2	0	0	1	E	1	E	A	A	0	0	6	0	0	0	0	0	0	F	D	B	2	<CR>
//0x7e,	0x32,	0x30,	0x30,	0x31,	0x45,	0x31,	0x45,	0x41,	0x41,	0x30,	0x30,	0x36,	0x30,	0x30,	0x30,	0x30,	0x30,	0x30,	0x30,	0x30,	0x30,	0x30,	0x0D
//};

// Bat dau phan danh cho tu Emerson phien ban moi---------------------------------------

#define GetACAnalogInfoLen          20
#define GetACACAlarmInfoLen         20
#define GetACParameterInfoLen       18
#define GetRectAnalogInfoLen        18
#define GetRectStateInfoLen        18
#define GetRectAlarmInfoLen         18
#define GetDCAnalogInfoLen          18
#define GetDCACAlarmInfoLen         18
#define GetDCParameterInfoLen       18
#define GetEMERTimeInfoLen              18
// Ban tin so 1 AC Analog Info
static unsigned char GetACAnalogInfo[20] = {
//~	2	1	0	1	4	0	4	1	E	0	0	2	0	0	F	D	3	C	/R
0x7e,	0x32,	0x31,	0x30,	0x31,	0x34,	0x30,	0x34,	0x31,	0x45,	0x30,	0x30,	0x32,	0x30,	0x30,	0x46,	0x44,	0x33,	0x43,	0x0d
};
static unsigned char GetACAlarmInfo[20] = {
//~	2	1	0	1	4	0	4	4	E	0	0	2	0	0	F	D	3	9	/R
0x7e,	0x32,	0x31,	0x30,	0x31,	0x34,	0x30,	0x34,	0x34,	0x45,	0x30,	0x30,	0x32,	0x30,	0x30,	0x46,	0x44,	0x33,	0x39,	0x0d
};
static unsigned char GetACParameterInfo[18] = {
//~	2	1	0	1	4	0	4	6	0	0	0	0	F	D	A	E	/R
0x7e,	0x32,	0x31,	0x30,	0x31,	0x34,	0x30,	0x34,	0x36,	0x30,	0x30,	0x30,	0x30,	0x46,	0x44,	0x41,	0x45,	0x0d
};
static unsigned char GetRectAnalogInfo[18] = {
//~	2	1	0	1	4	1	4	1	0	0	0	0	F	D	B	2	/R
0x7e,	0x32,	0x31,	0x30,	0x31,	0x34,	0x31,	0x34,	0x31,	0x30,	0x30,	0x30,	0x30,	0x46,	0x44,	0x42,	0x32,	0x0d
};
static unsigned char GetRectStateInfo[18] = {
//~	2	1	0	1	4	1	4	3	0	0	0	0	F	D	B	0	/R
0x7e,	0x32,	0x31,	0x30,	0x31,	0x34,	0x31,	0x34,	0x33,	0x30,	0x30,	0x30,	0x30,	0x46,	0x44,	0x42,	0x30,	0x0d
};
static unsigned char GetRectAlarmInfo[18] = {
//~	2	1	0	1	4	1	4	4	0	0	0	0	F	D	A	F	/R
0x7e,	0x32,	0x31,	0x30,	0x31,	0x34,	0x31,	0x34,	0x34,	0x30,	0x30,	0x30,	0x30,	0x46,	0x44,	0x41,	0x46,	0x0d
};
static unsigned char GetDCAnalogInfo[18] = {
//~	2	1	0	1	4	2	4	1	0	0	0	0	F	D	B	1	/R
0x7e,	0x32,	0x31,	0x30,	0x31,	0x34,	0x32,	0x34,	0x31,	0x30,	0x30,	0x30,	0x30,	0x46,	0x44,	0x42,	0x31,	0x0d
};
static unsigned char GetDCAlarmInfo[18] = {
//~	2	1	0	1	4	2	4	4	0	0	0	0	F	D	A	E	/R
0x7e,	0x32,	0x31,	0x30,	0x31,	0x34,	0x32,	0x34,	0x34,	0x30,	0x30,	0x30,	0x30,	0x46,	0x44,	0x41,	0x45,	0x0d
};
static unsigned char GetDCParameterInfo[18] = {
//~	2	1	0	1	4	2	4	6	0	0	0	0	F	D	A	C	/R
0x7e,	0x32,	0x31,	0x30,	0x31,	0x34,	0x32,	0x34,	0x36,	0x30,	0x30,	0x30,	0x30,	0x46,	0x44,	0x41,	0x43,	0x0d
};
static unsigned char GetEMERTimeInfo[18] = {
//~	2	1	0	1	4	2	4	D	0	0	0	0	F	D	9	E	/R
0x7e,	0x32,	0x31,	0x30,	0x31,	0x34,	0x32,	0x34,	0x44,	0x30,	0x30,	0x30,	0x30,	0x46,	0x44,	0x39,	0x45,	0x0d
};


#define EMER_ACVOLT_UPPERLIMIT		0x80
#define EMER_ACVOLT_LOWERLIMIT		0x81
#define EMER_ACINPUTCUR_UPPERLIMIT      0x82

#define EMER_DCVOLT_UPPERLIMIT 		0xE0
#define EMER_DCVOLT_LOWERLIMIT 		0xE1
#define EMER_FLOATVOLT 			0xF1
#define EMER_BOOSTVOLT 			0xF2
#define EMER_DCLOW 			0x81//0xE4//0xE1//81
#define EMER_LLVD 			0xF3
#define EMER_BLVD 			0xF8
#define EMER_CHARGINGFACTOR 		0xF5
#define EMER_TEMP_COMPENSATION 		0xF7
#define EMER_BATT_TEMP_OVER 		0xE6
#define EMER_BATT_CAP 			0xF4
#define EMER_TESTVOLT                   0xF9
#define EMER_TESTTERMINATION            0xFA
#define EMER_AFTERTESTCAP               0xFB

// Ket thuc phan danh cho tu Emerson phien ban moi---------------------------------------
//function----------------------------------------------------------------------
void setCommand(unsigned char *arrCmd,unsigned char *templateCmd, float setNum, bool type);
void getCommand(unsigned char *arrCmd,unsigned char *templateCmd);



#endif /* _DAQ_EMER_DRIVER_H */